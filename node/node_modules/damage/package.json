{
  "name": "damage",
  "version": "0.0.6",
  "description": "A simple way to calculate the 'damage' of running a task in Node.JS.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pedronasser/damage"
  },
  "keywords": [
    "benchmark",
    "calculate",
    "damage",
    "process",
    "memory",
    "delay",
    "leak",
    "heap"
  ],
  "author": {
    "name": "Pedro Nasser",
    "email": "pedro@yept.net"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/pedronasser/damage/issues"
  },
  "dependencies": {
    "q": "~0.9.7",
    "commander": "~2.0.0",
    "lodash": "~2.2.1",
    "colors": "~0.6.2",
    "usage": "~0.3.8",
    "heapdump": "~0.2.3"
  },
  "gypfile": true,
  "readme": "<!DOCTYPE html><html><head><meta charset=\"utf-8\"><style>html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }\r\n\r\nbody{\r\n  color:#444;\r\n  font-family:Georgia, Palatino, 'Palatino Linotype', Times, 'Times New Roman',\r\n              \"Hiragino Sans GB\", \"STXihei\", \"微软雅黑\", serif;\r\n  font-size:12px;\r\n  line-height:1.5em;\r\n  background:#fefefe;\r\n  width: 45em;\r\n  margin: 10px auto;\r\n  padding: 1em;\r\n  outline: 1300px solid #FAFAFA;\r\n}\r\n\r\na{ color: #0645ad; text-decoration:none;}\r\na:visited{ color: #0b0080; }\r\na:hover{ color: #06e; }\r\na:active{ color:#faa700; }\r\na:focus{ outline: thin dotted; }\r\na:hover, a:active{ outline: 0; }\r\n\r\nspan.backtick {\r\n  border:1px solid #EAEAEA;\r\n  border-radius:3px;\r\n  background:#F8F8F8;\r\n  padding:0 3px 0 3px;\r\n}\r\n\r\n::-moz-selection{background:rgba(255,255,0,0.3);color:#000}\r\n::selection{background:rgba(255,255,0,0.3);color:#000}\r\n\r\na::-moz-selection{background:rgba(255,255,0,0.3);color:#0645ad}\r\na::selection{background:rgba(255,255,0,0.3);color:#0645ad}\r\n\r\np{\r\nmargin:1em 0;\r\n}\r\n\r\nimg{\r\nmax-width:100%;\r\n}\r\n\r\nh1,h2,h3,h4,h5,h6{\r\nfont-weight:normal;\r\ncolor:#111;\r\nline-height:1em;\r\n}\r\nh4,h5,h6{ font-weight: bold; }\r\nh1{ font-size:2.5em; }\r\nh2{ font-size:2em; border-bottom:1px solid silver; padding-bottom: 5px; }\r\nh3{ font-size:1.5em; }\r\nh4{ font-size:1.2em; }\r\nh5{ font-size:1em; }\r\nh6{ font-size:0.9em; }\r\n\r\nblockquote{\r\ncolor:#666666;\r\nmargin:0;\r\npadding-left: 3em;\r\nborder-left: 0.5em #EEE solid;\r\n}\r\nhr { display: block; height: 2px; border: 0; border-top: 1px solid #aaa;border-bottom: 1px solid #eee; margin: 1em 0; padding: 0; }\r\n\r\n\r\npre , code, kbd, samp { \r\n  color: #000; \r\n  font-family: monospace; \r\n  font-size: 0.88em; \r\n  border-radius:3px;\r\n  background-color: #F8F8F8;\r\n  border: 1px solid #CCC; \r\n}\r\npre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; padding: 5px 12px;}\r\npre code { border: 0px !important; padding: 0;}\r\ncode { padding: 0 3px 0 3px; }\r\n\r\nb, strong { font-weight: bold; }\r\n\r\ndfn { font-style: italic; }\r\n\r\nins { background: #ff9; color: #000; text-decoration: none; }\r\n\r\nmark { background: #ff0; color: #000; font-style: italic; font-weight: bold; }\r\n\r\nsub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }\r\nsup { top: -0.5em; }\r\nsub { bottom: -0.25em; }\r\n\r\nul, ol { margin: 1em 0; padding: 0 0 0 2em; }\r\nli p:last-child { margin:0 }\r\ndd { margin: 0 0 0 2em; }\r\n\r\nimg { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; }\r\n\r\ntable { border-collapse: collapse; border-spacing: 0; }\r\ntd { vertical-align: top; }\r\n\r\n@media only screen and (min-width: 480px) {\r\nbody{font-size:14px;}\r\n}\r\n\r\n@media only screen and (min-width: 768px) {\r\nbody{font-size:16px;}\r\n}\r\n\r\n@media print {\r\n  * { background: transparent !important; color: black !important; filter:none !important; -ms-filter: none !important; }\r\n  body{font-size:12pt; max-width:100%; outline:none;}\r\n  a, a:visited { text-decoration: underline; }\r\n  hr { height: 1px; border:0; border-bottom:1px solid black; }\r\n  a[href]:after { content: \" (\" attr(href) \")\"; }\r\n  abbr[title]:after { content: \" (\" attr(title) \")\"; }\r\n  .ir a:after, a[href^=\"javascript:\"]:after, a[href^=\"#\"]:after { content: \"\"; }\r\n  pre, blockquote { border: 1px solid #999; padding-right: 1em; page-break-inside: avoid; }\r\n  tr, img { page-break-inside: avoid; }\r\n  img { max-width: 100% !important; }\r\n  @page :left { margin: 15mm 20mm 15mm 10mm; }\r\n  @page :right { margin: 15mm 10mm 15mm 20mm; }\r\n  p, h2, h3 { orphans: 3; widows: 3; }\r\n  h2, h3 { page-break-after: avoid; }\r\n}\r\n</style><title>README</title></head><body><h1 id=\"damage\">Damage</h1>\r\n<h4 id=\"find-out-what-is-killing-your-nodejs-process\">Find out what is killing your Node.JS process.</h4>\r\n<p>A simple way to profile the damage of running a task in a Node.JS instance.</p>\r\n<h2 id=\"how-it-works\">How it works</h2>\r\n<p>When you request a new damage calculation it follow these steps:</p>\r\n<ul>\r\n<li>Creates a script prepared to handle the test.</li>\r\n<li>Fork it.</li>\r\n<li>Execute it gathering process information.</li>\r\n<li>Process the result.</li>\r\n<li>Print/emit the result.</li>\r\n</ul>\r\n<h2 id=\"quick-start\">Quick start</h2>\r\n<h3 id=\"installing\">Installing</h3>\r\n<p>With <strong>Node.JS</strong> and <strong>NPM</strong> installed, type:</p>\r\n<pre><code>$ npm install damage\r\n</code></pre>\r\n<h3 id=\"configuring-the-damage\">Configuring the damage</h3>\r\n<p>Use this to get the Damage constructor.</p>\r\n<pre><code class=\"js\">var Damage = require('damage');\r\n</code></pre>\r\n\r\n<p>Then you can use <code>prepare()</code> to define a <code>preparation task</code> to run before each collection of tasks.</p>\r\n<pre><code class=\"js\">Damage.prepare(function () {\r\n    var fs = require('fs');\r\n});\r\n</code></pre>\r\n\r\n<p>Then finally you can just get your <code>damageOf()</code> function, that you need to create damage tests.</p>\r\n<pre><code class=\"js\">var damageOf = Damage();\r\n</code></pre>\r\n\r\n<p>Now that you have the function, just use it with a <code>description</code>, a <code>damage test function</code> and the <code>number of damage repeats</code>, just like this:</p>\r\n<pre><code class=\"js\">\r\ndamageOf('reading a file',function () {\r\n  fs.readFileSync(__filename);\r\n  done();\r\n},1000);\r\n\r\n</code></pre>\r\n\r\n<p><strong>Remember: Inside the test function you need to call <code>done()</code> after you finish the task.</strong></p>\r\n<h4 id=\"result-of-that-damage\">Result of that damage</h4>\r\n<p><img alt=\"\" src=\"https://dl.dropboxusercontent.com/u/21773527/damage-result.jpg\" /></p>\r\n<h2 id=\"features\">Features</h2>\r\n<h3 id=\"configuration\">Configuration</h3>\r\n<p>You can change the global configuration of Damage with this:</p>\r\n<pre><code class=\"js\">Damage.config({\r\n    colors: false\r\n});\r\n</code></pre>\r\n\r\n<p>To see all Damage's configuration, read this <a href=\"https://github.com/pedronasser/damage/blob/master/lib/config.js\">configuration file</a>.</p>\r\n<h3 id=\"environment\">Environment</h3>\r\n<p>You can change the Damage environment object with this:</p>\r\n<pre><code class=\"js\">Damage.env({\r\n    shit: true\r\n});\r\n</code></pre>\r\n\r\n<p>Then when you can access env variables like this:</p>\r\n<pre><code class=\"js\">var damageOf = Damage();\r\ndamageOf('testing some stuff', function () {\r\n    if (env.shit)\r\n        // do stuff\r\n    else\r\n        // do stuff\r\n},1000);\r\n</code></pre>\r\n\r\n<h3 id=\"preparation-script\">Preparation Script</h3>\r\n<p>You can change the Damage environment object with this:</p>\r\n<pre><code class=\"js\">Damage.prepare(function () {\r\n    var fs = require('fs');\r\n    var _ = require('underscore');\r\n    var mongoose = require('mongoose');\r\n});\r\n</code></pre>\r\n\r\n<h3 id=\"defining-where-test-begins\">Defining where test begins</h3>\r\n<p>Some cases you'll need to do specific task that can not be placed inside <code>prepare()</code> becuse is not used in other tasks.\r\nFor those cases you can use <code>start()</code> to define where the test really begins. </p>\r\n<p>Just like this:</p>\r\n<pre><code class=\"js\">var damageOf = Damage();\r\nDamage.prepare(function () { var fs = require('fs'); });\r\ndamageOf('testing some specific shit', function () {\r\n    var requiredFile = fs.readFileSync('randomfile');\r\n    var obj = JSON.parse(requiredFile);\r\n    ...\r\n</code></pre>\r\n\r\n<p>Add the <code>start()</code> to define that test will start now.</p>\r\n<pre><code class=\"js\">    ...\r\n    start();\r\n    ...\r\n</code></pre>\r\n\r\n<p>Now the real test begins.</p>\r\n<pre><code class=\"js\">    ...  \r\n    for (o in obj)\r\n        obj[o]=Number(obj[o]).valueOf();\r\n\r\n    done(); // And stops here.\r\n},1000);\r\n</code></pre>\r\n\r\n<h3 id=\"inspecting-the-result\">Inspecting the result</h3>\r\n<p>You can listen for the final processed and full result of each damage test using this:</p>\r\n<pre><code class=\"js\">// Add this after the damageOf() call\r\n.is(function (processed,result) {\r\n  fs.writeFile('output.log',JSON.parse(processed));\r\n})\r\n</code></pre>\r\n\r\n<h3 id=\"dumping-memory-heap\">Dumping memory heap</h3>\r\n<p>Now you can get a heap snapshot file for each task. Just define the following configurations:</p>\r\n<pre><code class=\"js\">Damage.config({\r\n    heapdump: true,\r\n    dumpPath: __dirname+'/tmp/' // Where you want to save all heap snapshots.\r\n});\r\n</code></pre>\r\n\r\n<h2 id=\"examples\">Examples</h2>\r\n<p>There are some examples <a href=\"https://github.com/pedronasser/damage/blob/master/examples/\">here</a>. =)</p></body></html>",
  "readmeFilename": "README.html",
  "_id": "damage@0.0.6",
  "_from": "damage@"
}
